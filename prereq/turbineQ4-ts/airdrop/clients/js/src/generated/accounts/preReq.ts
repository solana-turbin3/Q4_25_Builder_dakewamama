/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PRE_REQ_DISCRIMINATOR = new Uint8Array([
  137, 234, 243, 161, 230, 149, 21, 14,
]);

export function getPreReqDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PRE_REQ_DISCRIMINATOR);
}

export type PreReq = {
  discriminator: ReadonlyUint8Array;
  github: string;
  key: Address;
};

export type PreReqArgs = { github: string; key: Address };

export function getPreReqEncoder(): Encoder<PreReqArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['github', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['key', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PRE_REQ_DISCRIMINATOR })
  );
}

export function getPreReqDecoder(): Decoder<PreReq> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['github', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['key', getAddressDecoder()],
  ]);
}

export function getPreReqCodec(): Codec<PreReqArgs, PreReq> {
  return combineCodec(getPreReqEncoder(), getPreReqDecoder());
}

export function decodePreReq<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PreReq, TAddress>;
export function decodePreReq<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PreReq, TAddress>;
export function decodePreReq<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PreReq, TAddress> | MaybeAccount<PreReq, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPreReqDecoder()
  );
}

export async function fetchPreReq<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PreReq, TAddress>> {
  const maybeAccount = await fetchMaybePreReq(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePreReq<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PreReq, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePreReq(maybeAccount);
}

export async function fetchAllPreReq(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PreReq>[]> {
  const maybeAccounts = await fetchAllMaybePreReq(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePreReq(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PreReq>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePreReq(maybeAccount));
}
